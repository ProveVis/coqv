COQV --> COQTOP
<call val="Init"><option val="none"/></call>
COQTOP --> COQV
<value val="good"><state_id val="1"/></value>
COQV --> COQTOP
<call val="Add"><pair><pair><string>Variables&nbsp;P&nbsp;Q:Prop.</string><int>-1</int></pair><pair><state_id val="1"/><bool val="true"/></pair></pair></call>
COQV --> COQTOP
Variables P Q:Prop.
COQTOP --> COQV
<value val="good"><pair><state_id val="2"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
COQV --> COQTOP
<call val="Goal"><unit/></call>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="2"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="1"/><feedback_content val="processed"/></feedback>
COQTOP --> COQV
<message><message_level val="warning"/><option val="some"><loc start="0" stop="19"/></option><richpp><_>P&nbsp;is&nbsp;declared&nbsp;as&nbsp;a&nbsp;local&nbsp;axiom
[local-declaration,scope]</_></richpp></message>
COQTOP --> COQV
<message><message_level val="info"/><option val="none"/><richpp><_>P&nbsp;is&nbsp;declared</_></richpp></message><message><message_level val="warning"/><option val="some"><loc start="0" stop="19"/></option><richpp><_>Q&nbsp;is&nbsp;declared&nbsp;as&nbsp;a&nbsp;local&nbsp;axiom
[local-declaration,scope]</_></richpp></message><message><message_level val="info"/><option val="none"/><richpp><_>Q&nbsp;is&nbsp;declared</_></richpp></message><feedback object="state" route="0"><state_id val="2"/><feedback_content val="addedaxiom"/></feedback><feedback object="state" route="0"><state_id val="2"/><feedback_content val="processed"/></feedback><value val="good"><option val="none"/></value>
COQV --> COQTOP
<call val="Add"><pair><pair><string>Lemma&nbsp;id:&nbsp;P-&gt;Q-&gt;P.</string><int>-1</int></pair><pair><state_id val="2"/><bool val="true"/></pair></pair></call>
COQV --> COQTOP
Lemma id: P->Q->P.
COQTOP --> COQV
<value val="good"><pair><state_id val="3"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
COQV --> COQTOP
<call val="Goal"><unit/></call>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="3"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="2"/><feedback_content val="processed"/></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="3"/><feedback_content val="processed"/></feedback>
COQTOP --> COQV
<value val="good"><option val="some"><goals><list><goal><string>1</string><list/><richpp><_><constr.reference>P</constr.reference>&nbsp;<constr.notation>-&gt;</constr.notation>&nbsp;<constr.reference>Q</constr.reference>&nbsp;<constr.notation>-&gt;</constr.notation>&nbsp;<constr.reference>P</constr.reference></_></richpp></goal></list><list/><list/><list/></goals></option></value>
COQV --> COQTOP
<call val="Add"><pair><pair><string>Proof.</string><int>-1</int></pair><pair><state_id val="3"/><bool val="true"/></pair></pair></call>
COQV --> COQTOP
Proof.
COQTOP --> COQV
<value val="good"><pair><state_id val="4"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
COQV --> COQTOP
<call val="Goal"><unit/></call>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="3"/><feedback_content val="processed"/></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="processed"/></feedback>
COQTOP --> COQV
<value val="good"><option val="some"><goals><list><goal><string>1</string><list/><richpp><_><constr.reference>P</constr.reference>&nbsp;<constr.notation>-&gt;</constr.notation>&nbsp;<constr.reference>Q</constr.reference>&nbsp;<constr.notation>-&gt;</constr.notation>&nbsp;<constr.reference>P</constr.reference></_></richpp></goal></list><list/><list/><list/></goals></option></value>
COQV --> COQTOP
<call val="Add"><pair><pair><string>intros.</string><int>-1</int></pair><pair><state_id val="4"/><bool val="true"/></pair></pair></call>
COQV --> COQTOP
intros.
COQTOP --> COQV
<value val="good"><pair><state_id val="5"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
COQV --> COQTOP
<call val="Goal"><unit/></call>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="processed"/></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="processed"/></feedback>
COQTOP --> COQV
<value val="good"><option val="some"><goals><list><goal><string>3</string><list><richpp><_>H&nbsp;:&nbsp;<constr.reference>P</constr.reference></_></richpp><richpp><_>H0&nbsp;:&nbsp;<constr.reference>Q</constr.reference></_></richpp></list><richpp><_><constr.reference>P</constr.reference></_></richpp></goal></list><list/><list/><list/></goals></option></value>
COQV --> COQTOP
<call val="Add"><pair><pair><string>split.</string><int>-1</int></pair><pair><state_id val="5"/><bool val="true"/></pair></pair></call>
COQV --> COQTOP
split.
COQTOP --> COQV
<value val="good"><pair><state_id val="6"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
COQV --> COQTOP
<call val="Goal"><unit/></call>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="processed"/></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="message"><message><message_level val="error"/><option val="some"><loc start="0" stop="5"/></option><richpp><_><message.error>Error:</message.error>&nbsp;Not&nbsp;an&nbsp;inductive&nbsp;product.</_></richpp></message></feedback_content></feedback>
COQTOP --> COQV
<value val="fail" loc_s="0" loc_e="5"><state_id val="5"/><richpp><_>
<message.error>Error:</message.error>&nbsp;Not&nbsp;an&nbsp;inductive&nbsp;product.</_></richpp></value>
COQV --> COQTOP
<call val="Add"><pair><pair><string>assumption.</string><int>-1</int></pair><pair><state_id val="6"/><bool val="true"/></pair></pair></call>
COQV --> COQTOP
assumption.
COQTOP --> COQV
<value val="good"><pair><state_id val="7"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
COQV --> COQTOP
<call val="Goal"><unit/></call>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
COQTOP --> COQV
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="processed"/></feedback>
<value val="fail" loc_s="0" loc_e="5">
    <state_id val="5"/>
    <richpp>
        <_>
            <message.error>Error:</message.error>&nbsp;Not&nbsp;an&nbsp;inductive&nbsp;product.
        </_>
    </richpp>
</value>
